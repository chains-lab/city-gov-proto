// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/gov/gov.proto

package gov

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GovService_CreateCityGov_FullMethodName      = "/gov.GovService/CreateCityGov"
	GovService_DeleteCityGov_FullMethodName      = "/gov.GovService/DeleteCityGov"
	GovService_RefuseCityGovRight_FullMethodName = "/gov.GovService/RefuseCityGovRight"
	GovService_TransferAdminRight_FullMethodName = "/gov.GovService/TransferAdminRight"
	GovService_GetCityGov_FullMethodName         = "/gov.GovService/GetCityGov"
	GovService_GetListCityGovs_FullMethodName    = "/gov.GovService/GetListCityGovs"
	GovService_CreateCityGovAdmin_FullMethodName = "/gov.GovService/CreateCityGovAdmin"
	GovService_DeleteCityGovAdmin_FullMethodName = "/gov.GovService/DeleteCityGovAdmin"
)

// GovServiceClient is the client API for GovService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GovServiceClient interface {
	CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*CityGov, error)
	DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefuseCityGovRight(ctx context.Context, in *RefuseCityGovRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TransferAdminRight(ctx context.Context, in *TransferAdminRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCityGov(ctx context.Context, in *GetCityGovRequest, opts ...grpc.CallOption) (*CityGov, error)
	GetListCityGovs(ctx context.Context, in *ListCityGovsRequest, opts ...grpc.CallOption) (*ListCityGovs, error)
	// Admin methods
	CreateCityGovAdmin(ctx context.Context, in *CreateCityGovAdminRequest, opts ...grpc.CallOption) (*CityGov, error)
	DeleteCityGovAdmin(ctx context.Context, in *DeleteCityGovAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type govServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGovServiceClient(cc grpc.ClientConnInterface) GovServiceClient {
	return &govServiceClient{cc}
}

func (c *govServiceClient) CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityGov)
	err := c.cc.Invoke(ctx, GovService_CreateCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govServiceClient) DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GovService_DeleteCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govServiceClient) RefuseCityGovRight(ctx context.Context, in *RefuseCityGovRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GovService_RefuseCityGovRight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govServiceClient) TransferAdminRight(ctx context.Context, in *TransferAdminRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GovService_TransferAdminRight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govServiceClient) GetCityGov(ctx context.Context, in *GetCityGovRequest, opts ...grpc.CallOption) (*CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityGov)
	err := c.cc.Invoke(ctx, GovService_GetCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govServiceClient) GetListCityGovs(ctx context.Context, in *ListCityGovsRequest, opts ...grpc.CallOption) (*ListCityGovs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCityGovs)
	err := c.cc.Invoke(ctx, GovService_GetListCityGovs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govServiceClient) CreateCityGovAdmin(ctx context.Context, in *CreateCityGovAdminRequest, opts ...grpc.CallOption) (*CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityGov)
	err := c.cc.Invoke(ctx, GovService_CreateCityGovAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govServiceClient) DeleteCityGovAdmin(ctx context.Context, in *DeleteCityGovAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GovService_DeleteCityGovAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GovServiceServer is the server API for GovService service.
// All implementations must embed UnimplementedGovServiceServer
// for forward compatibility.
type GovServiceServer interface {
	CreateCityGov(context.Context, *CreateCityGovRequest) (*CityGov, error)
	DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error)
	RefuseCityGovRight(context.Context, *RefuseCityGovRightRequest) (*emptypb.Empty, error)
	TransferAdminRight(context.Context, *TransferAdminRightRequest) (*emptypb.Empty, error)
	GetCityGov(context.Context, *GetCityGovRequest) (*CityGov, error)
	GetListCityGovs(context.Context, *ListCityGovsRequest) (*ListCityGovs, error)
	// Admin methods
	CreateCityGovAdmin(context.Context, *CreateCityGovAdminRequest) (*CityGov, error)
	DeleteCityGovAdmin(context.Context, *DeleteCityGovAdminRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGovServiceServer()
}

// UnimplementedGovServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGovServiceServer struct{}

func (UnimplementedGovServiceServer) CreateCityGov(context.Context, *CreateCityGovRequest) (*CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityGov not implemented")
}
func (UnimplementedGovServiceServer) DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityGov not implemented")
}
func (UnimplementedGovServiceServer) RefuseCityGovRight(context.Context, *RefuseCityGovRightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseCityGovRight not implemented")
}
func (UnimplementedGovServiceServer) TransferAdminRight(context.Context, *TransferAdminRightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAdminRight not implemented")
}
func (UnimplementedGovServiceServer) GetCityGov(context.Context, *GetCityGovRequest) (*CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityGov not implemented")
}
func (UnimplementedGovServiceServer) GetListCityGovs(context.Context, *ListCityGovsRequest) (*ListCityGovs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCityGovs not implemented")
}
func (UnimplementedGovServiceServer) CreateCityGovAdmin(context.Context, *CreateCityGovAdminRequest) (*CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityGovAdmin not implemented")
}
func (UnimplementedGovServiceServer) DeleteCityGovAdmin(context.Context, *DeleteCityGovAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityGovAdmin not implemented")
}
func (UnimplementedGovServiceServer) mustEmbedUnimplementedGovServiceServer() {}
func (UnimplementedGovServiceServer) testEmbeddedByValue()                    {}

// UnsafeGovServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GovServiceServer will
// result in compilation errors.
type UnsafeGovServiceServer interface {
	mustEmbedUnimplementedGovServiceServer()
}

func RegisterGovServiceServer(s grpc.ServiceRegistrar, srv GovServiceServer) {
	// If the following call pancis, it indicates UnimplementedGovServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GovService_ServiceDesc, srv)
}

func _GovService_CreateCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).CreateCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_CreateCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).CreateCityGov(ctx, req.(*CreateCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovService_DeleteCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).DeleteCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_DeleteCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).DeleteCityGov(ctx, req.(*DeleteCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovService_RefuseCityGovRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseCityGovRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).RefuseCityGovRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_RefuseCityGovRight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).RefuseCityGovRight(ctx, req.(*RefuseCityGovRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovService_TransferAdminRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferAdminRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).TransferAdminRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_TransferAdminRight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).TransferAdminRight(ctx, req.(*TransferAdminRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovService_GetCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).GetCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_GetCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).GetCityGov(ctx, req.(*GetCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovService_GetListCityGovs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCityGovsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).GetListCityGovs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_GetListCityGovs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).GetListCityGovs(ctx, req.(*ListCityGovsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovService_CreateCityGovAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityGovAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).CreateCityGovAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_CreateCityGovAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).CreateCityGovAdmin(ctx, req.(*CreateCityGovAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovService_DeleteCityGovAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityGovAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovServiceServer).DeleteCityGovAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovService_DeleteCityGovAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovServiceServer).DeleteCityGovAdmin(ctx, req.(*DeleteCityGovAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GovService_ServiceDesc is the grpc.ServiceDesc for GovService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GovService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gov.GovService",
	HandlerType: (*GovServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityGov",
			Handler:    _GovService_CreateCityGov_Handler,
		},
		{
			MethodName: "DeleteCityGov",
			Handler:    _GovService_DeleteCityGov_Handler,
		},
		{
			MethodName: "RefuseCityGovRight",
			Handler:    _GovService_RefuseCityGovRight_Handler,
		},
		{
			MethodName: "TransferAdminRight",
			Handler:    _GovService_TransferAdminRight_Handler,
		},
		{
			MethodName: "GetCityGov",
			Handler:    _GovService_GetCityGov_Handler,
		},
		{
			MethodName: "GetListCityGovs",
			Handler:    _GovService_GetListCityGovs_Handler,
		},
		{
			MethodName: "CreateCityGovAdmin",
			Handler:    _GovService_CreateCityGovAdmin_Handler,
		},
		{
			MethodName: "DeleteCityGovAdmin",
			Handler:    _GovService_DeleteCityGovAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/gov/gov.proto",
}
